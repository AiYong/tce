#define _TCE_ADDSUB(i1, i2, o1, o2) do { int __tce_op_output_1 = (int)0; int __tce_op_output_2 = (int)0; asm ("ADDSUB":"=r"( __tce_op_output_1), "=r"( __tce_op_output_2):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;o2 = __tce_op_output_2;} while(0) 
#define _TCEFU_ADDSUB(FU, i1, i2, o1, o2) do { int __tce_op_output_1 = (int)0; int __tce_op_output_2 = (int)0; asm (FU".ADDSUB":"=r"( __tce_op_output_1), "=r"( __tce_op_output_2):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;o2 = __tce_op_output_2;} while(0) 
#define _TCE_SHL1ADD(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm ("SHL1ADD":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_SHL1ADD(FU, i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm (FU".SHL1ADD":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_SHL1ADD64(i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm ("SHL1ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_SHL1ADD64(FU, i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm (FU".SHL1ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_SHL2ADD(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm ("SHL2ADD":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_SHL2ADD(FU, i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm (FU".SHL2ADD":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_SHL2ADD64(i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm ("SHL2ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_SHL2ADD64(FU, i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm (FU".SHL2ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_SHL3ADD64(i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm ("SHL3ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_SHL3ADD64(FU, i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm (FU".SHL3ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_ADD(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm ("ADD":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_ADD(FU, i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm (FU".ADD":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_ADD64(i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm ("ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_ADD64(FU, i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm (FU".ADD64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_STW(i1, i2) do { asm volatile ("STW"::"ir"((unsigned)(i1)), "ir"(i2)); } while(0) 
#define _TCEFU_STW(FU, i1, i2) do { asm volatile (FU".STW"::"ir"((unsigned)(i1)), "ir"(i2)); } while(0) 
#define _TCEAS_STW(AS, i1, i2) do { asm volatile ("_AS." AS".STW"::"ir"((unsigned)(i1)), "ir"(i2)); } while(0) 
#define _TCE_XOR(i1, i2, o1) do { unsigned __tce_op_output_1 = (unsigned)0; asm ("XOR":"=r"( __tce_op_output_1):"ir"((unsigned)(i1)), "ir"((unsigned)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_XOR(FU, i1, i2, o1) do { unsigned __tce_op_output_1 = (unsigned)0; asm (FU".XOR":"=r"( __tce_op_output_1):"ir"((unsigned)(i1)), "ir"((unsigned)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_XOR64(i1, i2, o1) do { unsigned long __tce_op_output_1 = (unsigned long)0; asm ("XOR64":"=r"( __tce_op_output_1):"ir"((unsigned long)(i1)), "ir"((unsigned long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_XOR64(FU, i1, i2, o1) do { unsigned long __tce_op_output_1 = (unsigned long)0; asm (FU".XOR64":"=r"( __tce_op_output_1):"ir"((unsigned long)(i1)), "ir"((unsigned long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_MUL(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm ("MUL":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_MUL(FU, i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm (FU".MUL":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_MUL64(i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm ("MUL64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_MUL64(FU, i1, i2, o1) do { long __tce_op_output_1 = (long)0; asm (FU".MUL64":"=r"( __tce_op_output_1):"ir"((long)(i1)), "ir"((long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_DIVU(i1, i2, o1) do { unsigned __tce_op_output_1 = (unsigned)0; asm ("DIVU":"=r"( __tce_op_output_1):"ir"((unsigned)(i1)), "ir"((unsigned)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_DIVU(FU, i1, i2, o1) do { unsigned __tce_op_output_1 = (unsigned)0; asm (FU".DIVU":"=r"( __tce_op_output_1):"ir"((unsigned)(i1)), "ir"((unsigned)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_DIVU64(i1, i2, o1) do { unsigned long __tce_op_output_1 = (unsigned long)0; asm ("DIVU64":"=r"( __tce_op_output_1):"ir"((unsigned long)(i1)), "ir"((unsigned long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_DIVU64(FU, i1, i2, o1) do { unsigned long __tce_op_output_1 = (unsigned long)0; asm (FU".DIVU64":"=r"( __tce_op_output_1):"ir"((unsigned long)(i1)), "ir"((unsigned long)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_ADDF(i1, i2, o1) do { float __tce_op_output_1 = (float)0; asm ("ADDF":"=r"( __tce_op_output_1):"ir"((float)(i1)), "ir"((float)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_ADDF(FU, i1, i2, o1) do { float __tce_op_output_1 = (float)0; asm (FU".ADDF":"=r"( __tce_op_output_1):"ir"((float)(i1)), "ir"((float)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_MULF(i1, i2, o1) do { float __tce_op_output_1 = (float)0; asm ("MULF":"=r"( __tce_op_output_1):"ir"((float)(i1)), "ir"((float)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_MULF(FU, i1, i2, o1) do { float __tce_op_output_1 = (float)0; asm (FU".MULF":"=r"( __tce_op_output_1):"ir"((float)(i1)), "ir"((float)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_ADDH(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm ("ADDH":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_ADDH(FU, i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm (FU".ADDH":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_MULH(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm ("MULH":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_MULH(FU, i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm (FU".MULH":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_STW4(i1, i2, i3, i4, i5) do { asm volatile ("STW4"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3), "ir"(i4), "ir"(i5)); } while(0) 
#define _TCEFU_STW4(FU, i1, i2, i3, i4, i5) do { asm volatile (FU".STW4"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3), "ir"(i4), "ir"(i5)); } while(0) 
#define _TCEAS_STW4(AS, i1, i2, i3, i4, i5) do { asm volatile ("_AS." AS".STW4"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3), "ir"(i4), "ir"(i5)); } while(0) 
#define _TCE_STW2(i1, i2, i3) do { asm volatile ("STW2"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3)); } while(0) 
#define _TCEFU_STW2(FU, i1, i2, i3) do { asm volatile (FU".STW2"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3)); } while(0) 
#define _TCEAS_STW2(AS, i1, i2, i3) do { asm volatile ("_AS." AS".STW2"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3)); } while(0) 
#define _TCE_STW8(i1, i2, i3, i4, i5, i6, i7, i8, i9) do { asm volatile ("STW8"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3), "ir"(i4), "ir"(i5), "ir"(i6), "ir"(i7), "ir"(i8), "ir"(i9)); } while(0) 
#define _TCEFU_STW8(FU, i1, i2, i3, i4, i5, i6, i7, i8, i9) do { asm volatile (FU".STW8"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3), "ir"(i4), "ir"(i5), "ir"(i6), "ir"(i7), "ir"(i8), "ir"(i9)); } while(0) 
#define _TCEAS_STW8(AS, i1, i2, i3, i4, i5, i6, i7, i8, i9) do { asm volatile ("_AS." AS".STW8"::"ir"((unsigned)(i1)), "ir"(i2), "ir"(i3), "ir"(i4), "ir"(i5), "ir"(i6), "ir"(i7), "ir"(i8), "ir"(i9)); } while(0) 
#define _TCE_ADDD(i1, i2, o1) do { double __tce_op_output_1 = (double)0; asm ("ADDD":"=r"( __tce_op_output_1):"ir"((double)(i1)), "ir"((double)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_ADDD(FU, i1, i2, o1) do { double __tce_op_output_1 = (double)0; asm (FU".ADDD":"=r"( __tce_op_output_1):"ir"((double)(i1)), "ir"((double)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_MULD(i1, i2, o1) do { double __tce_op_output_1 = (double)0; asm ("MULD":"=r"( __tce_op_output_1):"ir"((double)(i1)), "ir"((double)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCEFU_MULD(FU, i1, i2, o1) do { double __tce_op_output_1 = (double)0; asm (FU".MULD":"=r"( __tce_op_output_1):"ir"((double)(i1)), "ir"((double)(i2))); o1 = __tce_op_output_1;} while(0) 
0x00000114
